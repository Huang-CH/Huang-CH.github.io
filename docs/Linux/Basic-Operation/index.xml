<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux运维基础 on 黄 超 | H&amp;C</title>
    <link>https://Huang-CH.github.io/docs/Linux/Basic-Operation/</link>
    <description>Recent content in Linux运维基础 on 黄 超 | H&amp;C</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://Huang-CH.github.io/docs/Linux/Basic-Operation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Keepalived</title>
      <link>https://Huang-CH.github.io/docs/Linux/Basic-Operation/Keepalived/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-CH.github.io/docs/Linux/Basic-Operation/Keepalived/</guid>
      <description>Keepalived简介#  Keepalive官网：https://www.keepalived.org
  Keepalived is a routing software written in C. The main goal of this project is to provide simple and robust facilities for loadbalancing and high-availability to Linux system and Linux based infrastructures. Loadbalancing framework relies on well-known and widely used Linux Virtual Server (IPVS) kernel module providing Layer4 loadbalancing. Keepalived implements a set of checkers to dynamically and adaptively maintain and manage loadbalanced server pool according their health.</description>
    </item>
    
    <item>
      <title>LVS</title>
      <link>https://Huang-CH.github.io/docs/Linux/Basic-Operation/LVS/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-CH.github.io/docs/Linux/Basic-Operation/LVS/</guid>
      <description>LVS简介#  LVS（Linux Virtual Server）官网：http://www.linuxvirtualserver.org/
  The Linux Virtual Server is a highly scalable and highly available server built on a cluster of real servers, with the load balancer running on the Linux operating system. The architecture of the server cluster is fully transparent to end users, and the users interact as if it were a single high-performance virtual server. For more information, click here.
The Linux Virtual Server as an advanced load balancing solution can be used to build highly scalable and highly available network services, such as scalable web, cache, mail, ftp, media and VoIP services.</description>
    </item>
    
    <item>
      <title>Nginx</title>
      <link>https://Huang-CH.github.io/docs/Linux/Basic-Operation/Nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-CH.github.io/docs/Linux/Basic-Operation/Nginx/</guid>
      <description>安装环境依赖# 安装PCRE# 检查PCRE是否安装
rpm -qa pcre pcre-devel 安装PCRE和PCRE库（正则表达式兼容模块），一般来说安装pcre-devel即可
yum install -y pcre pcre-devel  安装OpenSSL# 检查openssl是否安装
rpm -qa openssl openssl-devel 安装openssl和openssl库（实现https访问），一般来说安装openssl-devel即可
yum install -y openssl openssl-devel  安装其他依赖# yum install -y gcc gcc-c++ kernel-devel  安装Nginx# 检查Nginx是否安装
rpm -qa nginx 进入opt目录
cd /opt/ 下载Nginx安装包
wget http://nginx.org/download/nginx-1.16.1.tar.gz 解压Nginx安装包
tar -zxvf nginx-1.16.0.tar.gz 创建Nginx的软连接
ln -s /opt/nginx-1.16.0 /opt/nginx 进入Nginx文件夹</description>
    </item>
    
    <item>
      <title>NFS</title>
      <link>https://Huang-CH.github.io/docs/Linux/Basic-Operation/NFS/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-CH.github.io/docs/Linux/Basic-Operation/NFS/</guid>
      <description>NFS#  NFS(Network File System)网络文件系统
  NFS的优缺点# 优点#  简单、稳定、可靠   缺点#  存在单点故障，如果NFS Server宕机所有客户端均不能访问共享目录，可通过负载均衡和高可用方案弥补； 在大数据高并发的场合，NFS的效率和性能有限（一般几千万PV以下不是瓶颈，除非网站架构太差，WEB、数据库、存储前都没有缓存机制）； 客户端认证时基于IP地址和主机名称，权限是根据ID识别，安全性一般（用于局域网中问题不大）； NFS数据是明文的，NFS本身对数据不做验证； 多台客户端挂载一个NFS服务器时，管理维护麻烦（耦合度高），尤其是NFS服务端出问题后，所有NFS客户端都会挂掉   安装NFS和RPC服务# 在服务端和客户端上，安装NFS和RPC服务
yum -y install nfs-utils rpcbind  在服务端和客户端上，检查安装的NFS、RPC服务
rpm -aq nfs-utils rpcbind  启动NFS、RPC服务# 先启动RPC服务，一定要先启动RPC服务！
# /etc/init.d/rpcbind start systemctl start rpcbind.service  检查RPC服务启动状态
# /etc/init.d/rpcbind status systemctl status rpcbind.</description>
    </item>
    
    <item>
      <title>Rsync</title>
      <link>https://Huang-CH.github.io/docs/Linux/Basic-Operation/Rsync/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-CH.github.io/docs/Linux/Basic-Operation/Rsync/</guid>
      <description>Rsync# Rsync是一款开源的、快速的、多功能的、可实现全量及增量的本地或远程数据同步备份的优秀工具。并且可以不进行改变原有数据的属性信息，实现数据的备份迁移特性。Rsync软件适用于Unix/Linux/Windows等多种操作系统平台。
Rsync是一个快速和非常通用的文件复制工具。它能本地复制，远程复制，或者远程守护进程方式复制。它提供了大量的参数来控制其行为的各个方面，并且允许非常灵活的方式来实现文件的传输复制。它以其delta-transfer算法闻名。减少通过网络数据发送数量，利用只发送源文件和目标文件之间的差异信息，从而实现数据的增量同步复制。
Rsync被广泛使用在备份和镜像，以及作为一种改进后的复制命令用于日常应用。
  提示信息：
官方链接资料：http://www.samba.org/ftp/rsync/rsync.html
官方手册资料：man rsync / man rsync.conf
  Rsync的作用# Rsync英文全称为Remote Synchronization，从软件的名称就可以看出来，Rsync具有可使本地和远程两台主机之间的数据快速复制同步镜像、远程备份的功能，这个功能类似SSH的scp命令，但又优于scp命令的功能，scp每次都是全量拷贝，而rsync可以增量拷贝。当然，Rsync还可以在本地主机的不同分区或目录之间全量及增量的复制数据，这又类似cp命令，但同样也优于cp命令，cp每次都是全量拷贝，而raync可以增量拷贝。
Rsync命令除了作为本地和远程复制命令使用以外，还可以作为删除和查看命令被应用，在某种情况下类似于传统的rm和ls命令。 通过上面文字的介绍，可以总结一下rsync命令的主要作用分为以下4种
 实现本地数据同步复制（等价 cp 命令）
# 使用 cp 进行文件拷贝 cp -a /etc/hosts /temp/hosts.bak # 使用 rsync 实现 cp 功能 rsync -a /etc/hosts /temp/hosts.bak # 注意：当使用 rsync 同步目录时如果目录后面带/，则同步的是目录中内容 rsync -a /etc/ /temp/ # 同步的是/etc/下的所有文件到/temp/中 rsync -a /etc /temp/ # 这才是将/etc文件夹备份到/temp/中  实现远程数据同步复制（等价 scp 命令）
# 使用 scp 实现远程数据复制 scp -rp /etc/hosts 192.</description>
    </item>
    
    <item>
      <title>Ansible</title>
      <link>https://Huang-CH.github.io/docs/Linux/Basic-Operation/Ansible/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-CH.github.io/docs/Linux/Basic-Operation/Ansible/</guid>
      <description>关于Ansible# Ansible是一个IT自动化工具。它可以配置系统，部署软件，并协调更高级的IT任务，如持续部署或零停机滚动更新。
Ansible的主要目标是简单和易用性。它还非常注重安全性和可靠性，具有最小的移动部件，使用OpenSSH进行运输（以其他运输和拉取模式作为替代方案），以及一种围绕人类（即使是不熟悉程序的人）的可审计性设计的语言。
我们认为简单性与各种规模的环境相关，因此我们为各种类型的忙碌用户进行设计：开发人员、系统管理员、发布工程师、IT经理以及介于两者之间的每个人。Ansible适用于管理所有环境，从少数实例的小型设置到具有数千个实例的企业环境。
您可以在AnsibleFest上了解更多信息，AnsibleFest是红帽为所有Ansible贡献者、用户和客户举办的年度活动。AnsibleFest是与他人联系、学习新技能并找到新朋友进行自动化的地方。
Ansible以无代理的方式管理机器。从来没有关于如何升级远程守护进程的问题，或者因为守护进程被卸载而无法管理系统的问题。此外，安全性暴露大大降低，因为Ansible使用OpenSSH——使用SSH（安全壳）协议进行远程登录的开源连接工具。
Ansible是分散的-它依赖于您现有的操作系统凭据来控制对远程机器的访问。如果需要，Ansible可以轻松连接到Kerberos、LDAP和其他集中身份验证管理系统。
本文档涵盖了本页左上角注明的Ansible版本。我们维护多个版本的Ansible和Ansible文档，因此请确保您使用的文档版本涵盖了您正在使用的Ansible版本。对于最近的功能，我们注意到添加了该功能的Ansible版本。
Ansible大约每年发布两次新的主要版本。核心应用程序的演变有点保守，重视语言设计和设置的简单性。自2.10版本以来，贡献者更快地开发和更改集合中托管的模块和插件。
  官方网站：https://www.ansible.com
  安装Ansible#  Ansible只需要安装管理端并配置好被控端的SSH免密交互即可，无须安装客户端。
  安装epel-release源
yum -y install epel-release  安装ansible软件
yum -y install ansible  配置文件# 默认情况下，Ansible的配置文件所在路径为：/etc/ansible/ansible.cfg
 配置主机清单# 默认情况下，Ansible主机清单（inventory）在/etc/ansible/hosts文件中。
# 在主机清单中通过 [分组名称] 的方式进行分组 [Web] 192.168.1.101 192.168.1.102 [DB] 192.168.1.111 192.168.1.112 # 在主机清单中可以指定连接的端口、用户名和密码，但不推荐这样使用 [NFS] 192.168.1.120 ansible_ssh_port=22 ansible_ssh_user=root ansible_ssh_pass=&amp;#39;123456&amp;#39; # 在主机清单中支持子组，例如：将[DB]和[NFS]都放在[Data]组下 [Data:children] DB NFS  在编辑主机清单前，可以先备份主机清单： cp /etc/ansible/hosts /etc/ansible/hosts.</description>
    </item>
    
    <item>
      <title>Spuervisor</title>
      <link>https://Huang-CH.github.io/docs/Linux/Basic-Operation/Supervisor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-CH.github.io/docs/Linux/Basic-Operation/Supervisor/</guid>
      <description>Supervisor简介# Supervisor是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。它是通过fork/exec的方式把这些被管理的进程当作supervisor的子进程来启动，这样只要在supervisor的配置文件中，把要管理的进程的可执行文件的路径写进去即可。也实现当子进程挂掉的时候，父进程可以准确获取子进程挂掉的信息的，可以选择是否自己启动和报警。supervisor还提供了一个功能，可以为supervisord或者每个子进程，设置一个非root的user，这个user就可以管理它对应的进程。
  Supervisior官网：http://www.supervisord.org
  Supervisor安装# 有互联网连接# yum安装
yum install epel-relese yum -y install supervisor  pip安装
pip install supervisor  无互联网连接#  安装工具下载地址：https://pypi.org/pypi/setuptools/
 将下载的安装工具传输到服务器，进入相应目录，执行以下命令
python setup.py install  Supervisor启动# yum安装方式启动服务
systemctl start supervisor &amp;amp;&amp;amp; systemctl enable supervisor 手动安装方式启动服务
python /usr/bin/supervisord -c /etc/supervisord.conf  Supervisor配置# Supervisor默认配置文件路径：/etc/supervisord.conf
Supervisor自进程默认配置文件路径：/etc/supervisord.d
 Supervisor配置文件/etc/supervisord.conf解释说明</description>
    </item>
    
    <item>
      <title>Linux的systemd</title>
      <link>https://Huang-CH.github.io/docs/Linux/Basic-Operation/Linux%E7%9A%84systemd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-CH.github.io/docs/Linux/Basic-Operation/Linux%E7%9A%84systemd/</guid>
      <description>systemd的简介# RedHat：https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/system_administrators_guide/chap-managing_services_with_systemd
阮一峰博客：http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html
 systemd的命令# systemd 并不是一个命令，而是一组命令，管理操作系统的方方面面。
 systemctl# systemctl 是 systemd 的主命令，用于管理操作系统。
# 重启系统 sudo systemctl reboot # 关闭系统，切断电源 sudo systemctl poweroff # CPU停止工作 systemctl halt # 暂停系统 systemctl suspend # 让系统进入冬眠状态 systemctl hibernate # 让系统进入交互式休眠状态 systemctl hybrid-sleep # 启动进入救援状态（单用户状态） systemctl rescue  systemd-analyze# systemd-analyze 命令用于查看启动耗时。
# 查看启动耗时 systemd-analyze # 查看每个服务的启动耗时 systemd-analyze blame # 显示瀑布状的启动过程流 systemd-analyze critical-chain # 显示指定服务的启动流 systemd-analyze critical-chain &amp;lt;服务名称.</description>
    </item>
    
    <item>
      <title>Firewalld防火墙基础</title>
      <link>https://Huang-CH.github.io/docs/Linux/Basic-Operation/Firewalld%E9%98%B2%E7%81%AB%E5%A2%99%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-CH.github.io/docs/Linux/Basic-Operation/Firewalld%E9%98%B2%E7%81%AB%E5%A2%99%E5%9F%BA%E7%A1%80/</guid>
      <description>启动：systemctl start firewalld.service
 关闭：systemctl stop firewalld.service
 开机启用：systemctl enable firewalld.service
 开启禁用：systemctl disable firewalld.service
 查询状态：systemctl status firewalld.service
 查看版本：firewall-cmd --version
 查看所有打开的端口：firewall-cmd --zone=public --list-ports
 添加指定的端口（80端口）：firewall-cmd --zone=public --add-port=80/tcp --permanent
 --permanent 表示永久生效，没有此参数重启后失效
  删除指定的端口（80端口）：firewall-cmd --zone= public --remove-port=80/tcp --permanent
 重新加载：firewall-cmd --reload
 </description>
    </item>
    
    <item>
      <title>Linux磁盘的操作</title>
      <link>https://Huang-CH.github.io/docs/Linux/Basic-Operation/Linux%E7%A3%81%E7%9B%98%E7%9A%84%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-CH.github.io/docs/Linux/Basic-Operation/Linux%E7%A3%81%E7%9B%98%E7%9A%84%E6%93%8D%E4%BD%9C/</guid>
      <description>文件系统# Windwos平台# FAT FAT16 FAT32 NTFS   Linux平台# EXT2 EXT3 EXT4 XFS   网络共享文件系统# NFS：Network File System SMB：Server Message Block   集群文件系统# GFS：Google File System（谷歌公司为了存储海量数据而开发的文件系统） OCFS：Oracle Cluster File System（甲骨文公司为了数据库研发平台而定制的文件系统）   分布式文件系统# ceph：为了存储的可靠性和扩展性而研发的分布式文件系统   交换文件系统# swap   Linux磁盘分区# 查看识别的所有硬盘#fdisk -l  新建分区#硬盘小于2T时，可以使用fidsk命令</description>
    </item>
    
    <item>
      <title>NetworkManager</title>
      <link>https://Huang-CH.github.io/docs/Linux/Basic-Operation/NetworkManager/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-CH.github.io/docs/Linux/Basic-Operation/NetworkManager/</guid>
      <description>RHEL 8与RHEL 7的区别#  在RHEL 7上，同时支持Network.service和NetworkManager.service（简称NM），默认情况下，这两个服务都开启。 在RHEL 8上，已经弃用Network.service，因此只能通过NetworkManager.service进行网络配置，包括动态IP和静态IP。   NetworkManager介绍# NetworkManager是2004年Red Hat启动的项目，旨在能够让Linux用户更轻松地处理现代网络需求，尤其是无线网络，能自动发现网卡并配置ip地址。
 为什么要用NetworkManager？#  工具齐全：命令行、文本界面、图形界面、web 广泛管理：管理各种网络，有线、无线、物理、虚拟 参数丰富：多达200多项配置参数（包括ethtool参数） 通用性强：RedHat系、Suse系、Debian/Ubuntu系等，均支持 大势所趋：下一个大版本的RHEL只能通过NM管理网络   NetworkManager能管理什么？# 有线网卡、无线网卡 动态ip、静态ip 以太网、非以太网 物理网卡、虚拟网卡   NetworkManager的命令介绍# nmcli：命令行。这是最常用的工具，本文将详细讲解该工具使用。 nmtui：在shell终端开启文本图形界面。示意图见本文最后的Tips Freedesktop applet：如GNOME上自带的网络管理工具 cockpit：redhat自带的基于web图形界面的&amp;quot;驾驶舱&amp;quot;工具，具有dashborad和基础管理功能。示意图见本文   nmcli使用方法# nmcli使用方法非常类似linux ip命令、cisco交换机命令，并且支持tab补全，通过-h、–help、help查看帮助。在nmcli中有两个命令最为常用：
nmcli connection：译作连接，可理解为配置文件，可以简写为nmcli c 。
nmcli device：译作设备，可理解为实际存在的网卡（包括物理网卡和虚拟网卡），可以简写为nmcli d 。
 在NM里，有两个维度：连接（connection）和设备（device），这是多对一的关系。想给某个网卡配ip，首先NM要能纳管这个网卡。设备里存在的网卡（即nmcli d可以看到的），就是NM纳管的。接着，可以为一个设备配置多个连接（即nmcli c可以看到的），每个连接可以理解为一个ifcfg配置文件。同一时刻，一个设备只能有一个连接活跃。可以通过nmcli c up切换连接。</description>
    </item>
    
    <item>
      <title>借助系统存储管理器管理LVM</title>
      <link>https://Huang-CH.github.io/docs/Linux/Basic-Operation/%E5%80%9F%E5%8A%A9%E7%B3%BB%E7%BB%9F%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E5%99%A8%E7%AE%A1%E7%90%86LVM/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-CH.github.io/docs/Linux/Basic-Operation/%E5%80%9F%E5%8A%A9%E7%B3%BB%E7%BB%9F%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E5%99%A8%E7%AE%A1%E7%90%86LVM/</guid>
      <description>安装系统存储管理器
sudo yum install system-storage-manager  查看关于现有磁盘存储设备、存储池、LVM卷和存储快照的信息
sudo ssm list  将一个新的物理磁盘（比如 /dev/sdb）添加到现有的存储池（比如 centos）中
sudo ssm add -p &amp;lt;pool-name&amp;gt; &amp;lt;device&amp;gt;  如果你在存储池中有额外空间，可以扩大存储池中现有的磁盘卷
sudo ssm resize -s [size] [volume] 例如：需要给home挂载点增加 100G 的空间
sudo ssm resize -s +100G /dev/centos_centos7/home  使用 xfs_growfs 来扩展现有的 XFS 文件系统
sudo xfs_growfs /dev/centos_centos7/home  </description>
    </item>
    
    <item>
      <title>Linux实现SSH免密登录</title>
      <link>https://Huang-CH.github.io/docs/Linux/Basic-Operation/Linux%E5%AE%9E%E7%8E%B0SSH%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-CH.github.io/docs/Linux/Basic-Operation/Linux%E5%AE%9E%E7%8E%B0SSH%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86/</guid>
      <description>生成密钥
ssh-keygen -t rsa  查看生成的密钥
ls -lh /root/.ssh/  id_rsa：私钥
id_rsa.pub：公钥
  将公钥发送到需要免密登陆的服务器（192.168.1.100）
ssh-copy-id -i /root/.ssh/id_rsa.pub root@10.124.84.20  在此过程中需要输入192.168.1.100的密码
ssh-copy-id命令会将公钥内容写入到192.168.1.100服务器中的～/.ssh/authorized_keys文件中
  </description>
    </item>
    
    <item>
      <title>Linux多网卡绑定Bond</title>
      <link>https://Huang-CH.github.io/docs/Linux/Basic-Operation/Linux%E5%A4%9A%E7%BD%91%E5%8D%A1%E7%BB%91%E5%AE%9ABond/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-CH.github.io/docs/Linux/Basic-Operation/Linux%E5%A4%9A%E7%BD%91%E5%8D%A1%E7%BB%91%E5%AE%9ABond/</guid>
      <description>Bond概述# Bond通过多张网卡绑定为一张逻辑网卡，以实现本地网卡的冗余、带宽扩容和负载均衡，是生产环境中常用的技术。
 Bond的模式# Bond常用的模式有两种：
 balance-rr （mode=0 ）：以负载均衡算法中的轮询法（round-robin)进行工作。  优点：流量提高一倍。 缺点：接入的交换机需要做端口聚合，否则可能无法使用。   active-backup （ mode=1 ）：以主备模式工作，即同一时刻只有1块网卡工作。  优点：冗余性高。 缺点：利用率低，两块网卡只有一块在工作。     Bond的使用# 在Linux中使用 nmcli 命令对网卡进行Bond绑定。
例如，将一台Linux服务器的 eth0 和 eth1 网卡绑定为 bond0，工作模式设置为balance-rr ，可以通过以下命令实现
nmcli connection add type bond ifname bond0 mode 0 nmcli connection add type bond-slave ifname eth0 master bond0 nmcli connection add type bond-slave ifname eth1 master bond0  通过 cat /proc/net/bonding/bond0 命令可以查看bond的状态。</description>
    </item>
    
    <item>
      <title>Linux删除旧版本内核</title>
      <link>https://Huang-CH.github.io/docs/Linux/Basic-Operation/Linux%E5%88%A0%E9%99%A4%E6%97%A7%E7%89%88%E6%9C%AC%E5%86%85%E6%A0%B8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-CH.github.io/docs/Linux/Basic-Operation/Linux%E5%88%A0%E9%99%A4%E6%97%A7%E7%89%88%E6%9C%AC%E5%86%85%E6%A0%B8/</guid>
      <description>每次升级Linux内核后，GRUB 菜单都会添加一个新的引导条目，默认情况下 yum 包管理器最多安装 3 个版本的 Linux 内核，因此，内核引导条目仅限于 3 个，通过以下命令可以进行查看
grep installonly_limit /etc/dnf/dnf.conf  默认情况下，Linux 内核始终由 Yum 包管理器单独安装，同时保持旧版本完整以提供后备支持。此行为由两个 Yum 包管理器指令控制。
installonlypkgs： 控制包管理器只安装，不更新，内核尤其属于这一类。默认为 kernel、kernel-bigmem、kernel-enterprise、kernel-smp、kernel-debug、kernel-unsupported、kernel-source、kernel-devel、kernel-PAE、kernel-PAE-debug。
installonly_limit：installonlypkgs 中列出的要同时安装的软件包数量。设置为 0 将禁用此功能。默认值为 3 。从 3.2.24 版本开始，yum 现在将在 yumdb 中查找已安装软件包的 installonly 属性。如果该属性为 keep，则它们将永远不会被删除。
  查看已安装的Linux内核
rpm -q kernel  查看当前Linux内核版本
uname -r  查看默认的Linux内核版本
grubby --default-kernel  设置指定内核版本作为默认内核
# 查看 /boot 目录中可用的内核 ls -1 /boot/vmlinuz-* # 设置默认内核 grubby --set-default /boot/vmlinuz-5.14.0-362.8.1.el9_3.x86_64  删除旧版本的内核
dnf -y remove --oldinstallonly --setopt installonly_limit=1 kernel </description>
    </item>
    
    <item>
      <title>解决OpenMediaVault中FTP乱码问题</title>
      <link>https://Huang-CH.github.io/docs/Linux/Basic-Operation/%E8%A7%A3%E5%86%B3OpenMediaVault%E4%B8%ADFTP%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-CH.github.io/docs/Linux/Basic-Operation/%E8%A7%A3%E5%86%B3OpenMediaVault%E4%B8%ADFTP%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</guid>
      <description>问题分析# OpenMediaVault使用的FTP为proftpd，由于Linux中的默认字符编码为UTF-8，而Windows中的默认字符编码为GBK，因此使用Windows系统上传至FTP服务器后，文件会有乱码问题，为解决此问题，需要修改proftpd的配置文件。
 解决方法# 在/etc/proftpd路径下，创建lang.conf文件，加入以下内容：
&amp;lt;IfModule mod_lang.c&amp;gt; LangEngine on LangDefault en_US LangOptions PreferServerEncoding UseEncoding utf-8 GBK &amp;lt;/IfModule&amp;gt; 在/etc/proftpd/proftpd.conf文件的最后一行添加以下内容：
Include /etc/proftpd/lang.conf 重启proftpd
systemctl restart proftpd.service  </description>
    </item>
    
  </channel>
</rss>
