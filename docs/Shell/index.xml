<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shell on 黄 超 | H&amp;C</title>
    <link>https://Huang-CH.github.io/docs/Shell/</link>
    <description>Recent content in Shell on 黄 超 | H&amp;C</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://Huang-CH.github.io/docs/Shell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Shell Script</title>
      <link>https://Huang-CH.github.io/docs/Shell/Shell-Script/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-CH.github.io/docs/Shell/Shell-Script/</guid>
      <description>Shell和Shell脚本# Shell是一个命令行解释器，它的作用就是遵循一定的语法将输入的命令加以解释并传给系统。它为用户提供了一个向Linux发送请求以便运行程序的接口系统级程序，用户可以用Shell来启动、挂起、停止甚至是编写一些程序。 Shell本身是一个用C语言编写的程序，它是用户使用Linux的桥梁。Shell既是一种命令语言，又是一种程序设计语言。作为命令语言，它互动式地解释和执行用户输入的命令；作为程序设计语言，它定义了各种变量和参数，并提供了许多在高阶语言中才具有的控制结构，包括循环和分支。它虽然不是 Linux系统内核的一部分，但它调用了系统内核的大部分功能来执行程序、创建文档并以并行的方式协调各个程序的运行。
Shell脚本是一种文本文件，其中包含了一系列的命令，可以通过解释器来执行。使用Shell脚本可以提高工作效率，减少重复性工作。
 Shell的优势# 虽然目前有很多脚本编程语言，但对于Linux操作系统而言，Shell是最好的工具，Linux底层命令都支持Shell语句，同时结合grep、sed和awk可以实现更高级的用法。Shell擅长系统管理脚本的开发，如软件启停脚本、监控报警脚本、日志分析脚本等。
 Shebang# 在计算领域中，Shebang（也称为 Hashbang ）是一个由井号和叹号构成的字符序列 #! ，其出现在文本文件的第一行的前两个字符。 在文件中存在 Shebang 的情况下，类 Unix 操作系统的程序加载器会分析 Shebang 后的内容，将这些内容作为解释器指令，并调用该指令，并将载有 Shebang 的文件路径作为该解释器的参数。
以#! /bin/sh开头的文件，程序在执行的时候会调用/bin/sh，也就是Bash解释器去执行文件中的代码。
以#! /usr/bin/python开头的文件，程序在执行的时候会调用/usr/bin/python，代表指定使用Python解释器去执行文件中的代码。
以#! /usr/bin/env开头的文件，是一种在不同平台上都能正确找到解释器的方法。
 注意事项：
 如果脚本文件指定了Shebang解释器，在脚本文件执行的时候，脚本文件名会作为参数传递给指定的解释器。 如果脚本文件未指定Shebang解释器，在脚本文件执行的时候，默认会使用当前Shell（echo $SHELL）去解释执行脚本文件. 如果脚本文件指定的Shebang解释器没有可执行权限，则会报错 “Bad interpreter：Permission denied”。 如果脚本文件指定的Shebang解释器不存在，则会报错 “Bad interpreter：No such file or directory”。 如果脚本文件指定的Shebang解释器不是一个可执行的文件，那么指定的解释器将会被忽略，转而交给当前的Shell去执行这个脚本。 脚本文件指定的Shebang解释器需要使用绝对路径。 如果在Shell中指定解释器执行文件，则文件指定的Shebang解释器将会被忽略。    注释# 在Shell脚本中使用#进行注释，注释可以单独写一行，也可以跟在命令后面。示例如下：
#! /bin/bash  # Description: 这是一个脚本文件 # Date: 2023-01-01 # Author: HC echo &amp;#34;这是一个脚本文件！&amp;#34;  变量# 定义变量# Shell属于弱类型语言，无需声明变量类型，可以直接定义变量并使用。Shell中定义的变量，数据类型默认为字符串。</description>
    </item>
    
    <item>
      <title>CentOS 7升级SSH脚本</title>
      <link>https://Huang-CH.github.io/docs/Shell/CentOS-7%E5%8D%87%E7%BA%A7SSH%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Huang-CH.github.io/docs/Shell/CentOS-7%E5%8D%87%E7%BA%A7SSH%E8%84%9A%E6%9C%AC/</guid>
      <description>#! /bin/bash  # 作者：黄超 # 创建时间：2023年9月20日 # 脚本描述：此脚本用于升级CentOS 7 的OpenSSL和OpenSSH # 定义全局变量 INSTALL_DIR=/opt/installed LOG_FILE=&amp;#34;openssh_upgrade.log&amp;#34; # 定义函数，用于记录日志并退出脚本 exit_with_error() { echo &amp;#34;[ERROR] $1&amp;#34; echo &amp;#34;[ERROR] $1&amp;#34; &amp;gt;&amp;gt; ${INSTALL_DIR}/${LOG_FILE} exit 1 } # 安装依赖组件 yum -y install gcc zlib-devel.x86_64 || exit_with_error &amp;#34;安装依赖组件失败&amp;#34; echo &amp;#34;开始更新 OpenSSL&amp;#34; echo &amp;#34;--------------------------------------------------&amp;#34; sleep 3 # 定义变量 OPENSSL_VERSION=1.1.1w OPENSSL_FILENAME=openssl-${OPENSSL_VERSION}.tar.gz OPENSSL_DIR=openssl-${OPENSSL_VERSION} # 备份 OpenSSL mv /usr/bin/openssl /usr/bin/openssl.old || exit_with_error &amp;#34;备份/usr/bin/openssl失败&amp;#34; # 进入安装目录 cd ${INSTALL_DIR} # 解压 OpenSSL tar -xvf ${INSTALL_DIR}/${OPENSSL_FILENAME} || exit_with_error &amp;#34;解压${OPENSSL_FILENAME}失败&amp;#34; # 进入 OpenSSL 目录 cd ${INSTALL_DIR}/${OPENSSL_DIR} || exit_with_error &amp;#34;进入${OPENSSL_DIR}目录失败&amp;#34; # OpenSSL 安装配置 .</description>
    </item>
    
  </channel>
</rss>
